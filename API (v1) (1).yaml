openapi: 3.0.3
info:
  title: API
  version: 1.0.0 (v1)
  description: API
paths:
  /api/v1/billing/invoices/:
    get:
      operationId: api_v1_billing_invoices_list
      description: |-
        A mixin that filters queryset by the user's companies.
        Works with ModelViewSet and GenericAPIView.
      summary: List all invoices
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Billing
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInvoiceList'
          description: ''
    post:
      operationId: api_v1_billing_invoices_create
      description: |-
        A mixin that filters queryset by the user's companies.
        Works with ModelViewSet and GenericAPIView.
      summary: Create a new invoice
      tags:
      - Billing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Invoice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Invoice'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: ''
  /api/v1/billing/invoices/{id}/:
    get:
      operationId: api_v1_billing_invoices_retrieve
      description: |-
        A mixin that filters queryset by the user's companies.
        Works with ModelViewSet and GenericAPIView.
      summary: Retrieve a specific invoice
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invoice.
        required: true
      tags:
      - Billing
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: ''
    put:
      operationId: api_v1_billing_invoices_update
      description: |-
        A mixin that filters queryset by the user's companies.
        Works with ModelViewSet and GenericAPIView.
      summary: Partially update an invoice
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invoice.
        required: true
      tags:
      - Billing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Invoice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Invoice'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: ''
    patch:
      operationId: api_v1_billing_invoices_partial_update
      description: |-
        A mixin that filters queryset by the user's companies.
        Works with ModelViewSet and GenericAPIView.
      summary: Partially update an invoice
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invoice.
        required: true
      tags:
      - Billing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInvoice'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedInvoice'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInvoice'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invoice'
          description: ''
    delete:
      operationId: api_v1_billing_invoices_destroy
      description: |-
        A mixin that filters queryset by the user's companies.
        Works with ModelViewSet and GenericAPIView.
      summary: Delete an invoice
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invoice.
        required: true
      tags:
      - Billing
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/billing/payments/:
    get:
      operationId: api_v1_billing_payments_list
      description: |-
        A mixin that filters queryset by the user's companies.
        Works with ModelViewSet and GenericAPIView.
      summary: List all payments
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Billing
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPaymentList'
          description: ''
  /api/v1/billing/payments/{id}/:
    get:
      operationId: api_v1_billing_payments_retrieve
      description: |-
        A mixin that filters queryset by the user's companies.
        Works with ModelViewSet and GenericAPIView.
      summary: Retrieve a specific payment
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this payment.
        required: true
      tags:
      - Billing
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
  /api/v1/billing/plans/:
    get:
      operationId: api_v1_billing_plans_list
      summary: List all billing plans
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Billing
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBillingPlanList'
          description: ''
  /api/v1/billing/plans/{id}/:
    get:
      operationId: api_v1_billing_plans_retrieve
      summary: Retrieve a specific billing plan
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this billing plan.
        required: true
      tags:
      - Billing
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingPlan'
          description: ''
  /api/v1/billing/subscription/:
    get:
      operationId: api_v1_billing_subscription_retrieve
      description: Return user subscription plan info.
      summary: Get current user's subscription
      tags:
      - Billing
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
          description: ''
  /api/v1/companies/:
    get:
      operationId: api_v1_companies_list
      description: Retrieve a list of all registered companies.
      summary: List all companies
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Companies
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCompanyList'
          description: ''
    post:
      operationId: api_v1_companies_create
      description: Create a new company with the provided data.
      summary: Create a new company
      tags:
      - Companies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Company'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Company'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
          description: ''
  /api/v1/companies/{id}/:
    get:
      operationId: api_v1_companies_retrieve
      description: Retrieve details of a specific company by ID.
      summary: Retrieve a company
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Company.
        required: true
      tags:
      - Companies
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
          description: ''
    put:
      operationId: api_v1_companies_update
      description: Update all fields of a company by ID.
      summary: Update a company
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Company.
        required: true
      tags:
      - Companies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Company'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Company'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Company'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
          description: ''
    patch:
      operationId: api_v1_companies_partial_update
      description: Update one or more fields of a company by ID.
      summary: Partially update a company
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Company.
        required: true
      tags:
      - Companies
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCompany'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCompany'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCompany'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Company'
          description: ''
    delete:
      operationId: api_v1_companies_destroy
      description: Delete a specific company by ID.
      summary: Delete a company
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Company.
        required: true
      tags:
      - Companies
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/jwt/create/:
    post:
      operationId: api_v1_jwt_create_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/v1/jwt/refresh/:
    post:
      operationId: api_v1_jwt_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/v1/jwt/verify/:
    post:
      operationId: api_v1_jwt_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/v1/partners/:
    get:
      operationId: api_v1_partners_list
      description: Retrieve a list of all active partner records.
      summary: List all active partners
      parameters:
      - in: query
        name: address_1
        schema:
          type: string
      - in: query
        name: address_2
        schema:
          type: string
      - in: query
        name: email
        schema:
          type: string
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: is_blacklisted
        schema:
          type: boolean
      - in: query
        name: is_customer
        schema:
          type: boolean
      - in: query
        name: is_supplier
        schema:
          type: boolean
      - in: query
        name: name
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Partners
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPartnerList'
          description: ''
    post:
      operationId: api_v1_partners_create
      description: Create a new partner record with the provided data.
      summary: Create a new partner
      tags:
      - Partners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Partner'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Partner'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Partner'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
          description: ''
  /api/v1/partners/{id}/:
    get:
      operationId: api_v1_partners_retrieve
      description: Retrieve the details of a specific active partner by ID.
      summary: Retrieve a partner
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this partner.
        required: true
      tags:
      - Partners
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
          description: ''
    put:
      operationId: api_v1_partners_update
      description: Fully update a partner record by ID.
      summary: Update a partner
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this partner.
        required: true
      tags:
      - Partners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Partner'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Partner'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Partner'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
          description: ''
    patch:
      operationId: api_v1_partners_partial_update
      description: Update one or more fields of a partner record.
      summary: Partially update a partner
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this partner.
        required: true
      tags:
      - Partners
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPartner'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPartner'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPartner'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Partner'
          description: ''
    delete:
      operationId: api_v1_partners_destroy
      description: Delete (deactivate) a specific partner by ID.
      summary: Delete a partner
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this partner.
        required: true
      tags:
      - Partners
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/payments/:
    get:
      operationId: api_v1_payments_list
      description: Retrieve a list of all active product Payments.
      summary: List all active Payments
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Payment
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPaymentList'
          description: ''
    post:
      operationId: api_v1_payments_create
      description: Create a new product Payment.
      summary: Create a new Payment
      tags:
      - Payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Payment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Payment'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
  /api/v1/payments/{id}/:
    get:
      operationId: api_v1_payments_retrieve
      description: Retrieve details of a specific active Payment by ID.
      summary: Retrieve a Payment
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this payment.
        required: true
      tags:
      - Payment
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
    put:
      operationId: api_v1_payments_update
      description: Fully update a product Payment by ID.
      summary: Update a Payment
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this payment.
        required: true
      tags:
      - Payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Payment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Payment'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
    patch:
      operationId: api_v1_payments_partial_update
      description: Partially update a product Payment.
      summary: Partially update a Payment
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this payment.
        required: true
      tags:
      - Payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPayment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPayment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPayment'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
          description: ''
    delete:
      operationId: api_v1_payments_destroy
      description: Delete a product Payment by ID.
      summary: Delete a Payment
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this payment.
        required: true
      tags:
      - Payment
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/payments/currency/:
    get:
      operationId: api_v1_payments_currency_list
      description: Retrieve a list of all active Currencies.
      summary: List all active Currencies
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Payment
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCurrencyList'
          description: ''
    post:
      operationId: api_v1_payments_currency_create
      description: Create a new Currency.
      summary: Create a new Currency
      tags:
      - Payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Currency'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Currency'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
          description: ''
  /api/v1/payments/currency/{id}/:
    get:
      operationId: api_v1_payments_currency_retrieve
      description: Retrieve details of a specific active Currency by ID.
      summary: Retrieve a Currency
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this currency.
        required: true
      tags:
      - Payment
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
          description: ''
    put:
      operationId: api_v1_payments_currency_update
      description: Fully update a Currency by ID.
      summary: Update a Currency
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this currency.
        required: true
      tags:
      - Payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Currency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Currency'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Currency'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
          description: ''
    patch:
      operationId: api_v1_payments_currency_partial_update
      description: Partially update a Currency.
      summary: Partially update a Currency
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this currency.
        required: true
      tags:
      - Payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCurrency'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCurrency'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCurrency'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Currency'
          description: ''
    delete:
      operationId: api_v1_payments_currency_destroy
      description: Delete a Currency by ID.
      summary: Delete a Currency
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this currency.
        required: true
      tags:
      - Payment
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/payments/methods/:
    get:
      operationId: api_v1_payments_methods_list
      description: Retrieve a list of all active PaymentMethods.
      summary: List all active PaymentMethods
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Payment
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPaymentMethodList'
          description: ''
    post:
      operationId: api_v1_payments_methods_create
      description: Create a new PaymentMethod.
      summary: Create a new PaymentMethod
      tags:
      - Payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: ''
  /api/v1/payments/methods/{id}/:
    get:
      operationId: api_v1_payments_methods_retrieve
      description: Retrieve details of a specific active PaymentMethod by ID.
      summary: Retrieve a PaymentMethod
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this payment method.
        required: true
      tags:
      - Payment
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: ''
    put:
      operationId: api_v1_payments_methods_update
      description: Fully update a PaymentMethod by ID.
      summary: Update a PaymentMethod
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this payment method.
        required: true
      tags:
      - Payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PaymentMethod'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: ''
    patch:
      operationId: api_v1_payments_methods_partial_update
      description: Partially update a PaymentMethod.
      summary: Partially update a PaymentMethod
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this payment method.
        required: true
      tags:
      - Payment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPaymentMethod'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPaymentMethod'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPaymentMethod'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentMethod'
          description: ''
    delete:
      operationId: api_v1_payments_methods_destroy
      description: Delete a PaymentMethod by ID.
      summary: Delete a PaymentMethod
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this payment method.
        required: true
      tags:
      - Payment
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/pos/registers/:
    get:
      operationId: api_v1_pos_registers_list
      description: Retrieve a list of all active register records.
      summary: List all active registers
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Registers
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedRegisterList'
          description: ''
    post:
      operationId: api_v1_pos_registers_create
      description: Create a new register entry.
      summary: Create a new register
      tags:
      - Registers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
  /api/v1/pos/registers/{id}/:
    get:
      operationId: api_v1_pos_registers_retrieve
      description: Retrieve details of a specific active register by ID.
      summary: Retrieve a register
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this register.
        required: true
      tags:
      - Registers
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
    put:
      operationId: api_v1_pos_registers_update
      description: Fully update a register record by ID.
      summary: Update a register
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this register.
        required: true
      tags:
      - Registers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
    patch:
      operationId: api_v1_pos_registers_partial_update
      description: Update specific fields of a register record.
      summary: Partially update a register
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this register.
        required: true
      tags:
      - Registers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRegister'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRegister'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRegister'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
          description: ''
    delete:
      operationId: api_v1_pos_registers_destroy
      description: Delete (deactivate) a specific register by ID.
      summary: Delete a register
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this register.
        required: true
      tags:
      - Registers
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/pos/sales/:
    get:
      operationId: api_v1_pos_sales_list
      description: Retrieve a list of all active sale records.
      summary: List all active sales
      parameters:
      - in: query
        name: company
        schema:
          type: integer
      - in: query
        name: created_by
        schema:
          type: integer
      - in: query
        name: customer
        schema:
          type: string
          format: uuid
      - in: query
        name: max_amount_due
        schema:
          type: number
      - in: query
        name: max_amount_paid
        schema:
          type: number
      - in: query
        name: max_amount_total
        schema:
          type: number
      - in: query
        name: min_amount_due
        schema:
          type: number
      - in: query
        name: min_amount_paid
        schema:
          type: number
      - in: query
        name: min_amount_total
        schema:
          type: number
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: register
        schema:
          type: string
          format: uuid
      - in: query
        name: session
        schema:
          type: string
          format: uuid
      tags:
      - Sales
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSaleList'
          description: ''
    post:
      operationId: api_v1_pos_sales_create
      description: Create a new sale record.
      summary: Create a new sale
      tags:
      - Sales
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Sale'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Sale'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
          description: ''
  /api/v1/pos/sales/{id}/:
    get:
      operationId: api_v1_pos_sales_retrieve
      description: Retrieve details of a specific active sale by ID.
      summary: Retrieve a sale
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this sale.
        required: true
      tags:
      - Sales
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
          description: ''
    put:
      operationId: api_v1_pos_sales_update
      description: Fully update a sale record by ID.
      summary: Update a sale
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this sale.
        required: true
      tags:
      - Sales
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sale'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Sale'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Sale'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
          description: ''
    patch:
      operationId: api_v1_pos_sales_partial_update
      description: Update specific fields of a sale record.
      summary: Partially update a sale
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this sale.
        required: true
      tags:
      - Sales
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSale'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSale'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSale'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sale'
          description: ''
    delete:
      operationId: api_v1_pos_sales_destroy
      description: Delete (deactivate) a specific sale by ID.
      summary: Delete a sale
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this sale.
        required: true
      tags:
      - Sales
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/pos/sessions/:
    get:
      operationId: api_v1_pos_sessions_list
      description: Retrieve a list of all active session records.
      summary: List all active sessions
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Sales
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSessionList'
          description: ''
    post:
      operationId: api_v1_pos_sessions_create
      description: Create a new session entry.
      summary: Create a new session
      tags:
      - Sales
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Session'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Session'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
  /api/v1/pos/sessions/{id}/:
    get:
      operationId: api_v1_pos_sessions_retrieve
      description: Retrieve details of a specific active session by ID.
      summary: Retrieve a session
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this POS Session.
        required: true
      tags:
      - Sales
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
    put:
      operationId: api_v1_pos_sessions_update
      description: Fully update a session record by ID.
      summary: Update a session
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this POS Session.
        required: true
      tags:
      - Sales
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Session'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Session'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Session'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
    patch:
      operationId: api_v1_pos_sessions_partial_update
      description: Update specific fields of a session record.
      summary: Partially update a session
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this POS Session.
        required: true
      tags:
      - Sales
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSession'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: ''
    delete:
      operationId: api_v1_pos_sessions_destroy
      description: Delete (deactivate) a specific session by ID.
      summary: Delete a session
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this POS Session.
        required: true
      tags:
      - Sales
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/products/:
    get:
      operationId: api_v1_products_list
      description: Retrieve a list of all active products.
      summary: List all active products
      parameters:
      - in: query
        name: barcode
        schema:
          type: string
      - in: query
        name: category
        schema:
          type: string
          format: uuid
      - in: query
        name: companies
        schema:
          type: string
        description: Comma-separated list of company IDs to filter by
      - in: query
        name: company
        schema:
          type: integer
      - in: query
        name: max_cost
        schema:
          type: number
      - in: query
        name: max_price
        schema:
          type: number
      - in: query
        name: min_cost
        schema:
          type: number
      - in: query
        name: min_price
        schema:
          type: number
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: query
        name: reference
        schema:
          type: string
      - in: query
        name: sku
        schema:
          type: string
      - in: query
        name: unit
        schema:
          type: string
          format: uuid
      tags:
      - Products
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProductList'
          description: ''
    post:
      operationId: api_v1_products_create
      description: Create a new product.
      summary: Create a new product
      tags:
      - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
  /api/v1/products/{id}/:
    get:
      operationId: api_v1_products_retrieve
      description: Retrieve details of a specific active product by ID.
      summary: Retrieve a product
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - Products
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    put:
      operationId: api_v1_products_update
      description: Fully update a product by ID.
      summary: Update a product
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    patch:
      operationId: api_v1_products_partial_update
      description: Partially update a product.
      summary: Partially update a product
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - Products
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProduct'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
          description: ''
    delete:
      operationId: api_v1_products_destroy
      description: Delete a product by ID.
      summary: Delete a product
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this product.
        required: true
      tags:
      - Products
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/products/categories/:
    get:
      operationId: api_v1_products_categories_list
      description: Retrieve a list of all active product categories.
      summary: List all active categories
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Categories
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoryList'
          description: ''
    post:
      operationId: api_v1_products_categories_create
      description: Create a new product category.
      summary: Create a new category
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/v1/products/categories/{id}/:
    get:
      operationId: api_v1_products_categories_retrieve
      description: Retrieve details of a specific active category by ID.
      summary: Retrieve a category
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - Categories
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    put:
      operationId: api_v1_products_categories_update
      description: Fully update a product category by ID.
      summary: Update a category
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Category'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: api_v1_products_categories_partial_update
      description: Partially update a product category.
      summary: Partially update a category
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - Categories
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategory'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: api_v1_products_categories_destroy
      description: Delete a product category by ID.
      summary: Delete a category
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this category.
        required: true
      tags:
      - Categories
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/products/dashboard/:
    get:
      operationId: api_v1_products_dashboard_retrieve
      description: Retrieve statistics for the product dashboard.
      summary: Product Dashboard Statistics
      tags:
      - Dashboard
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          description: No response body
  /api/v1/products/units/:
    get:
      operationId: api_v1_products_units_list
      description: Retrieve a list of all active units.
      summary: List all active units
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Units
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUnitList'
          description: ''
    post:
      operationId: api_v1_products_units_create
      description: Create a new unit.
      summary: Create a new unit
      tags:
      - Units
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Unit'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Unit'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
  /api/v1/products/units/{id}/:
    get:
      operationId: api_v1_products_units_retrieve
      description: Retrieve details of a specific active unit by ID.
      summary: Retrieve a unit
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this unit.
        required: true
      tags:
      - Units
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
    put:
      operationId: api_v1_products_units_update
      description: Fully update a unit by ID.
      summary: Update a unit
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this unit.
        required: true
      tags:
      - Units
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Unit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Unit'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Unit'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
    patch:
      operationId: api_v1_products_units_partial_update
      description: Partially update a unit.
      summary: Partially update a unit
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this unit.
        required: true
      tags:
      - Units
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUnit'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUnit'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUnit'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
          description: ''
    delete:
      operationId: api_v1_products_units_destroy
      description: Delete a unit by ID.
      summary: Delete a unit
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this unit.
        required: true
      tags:
      - Units
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/purchases/:
    get:
      operationId: api_v1_purchases_list
      description: Retrieve a list of all active Purchase records.
      summary: List all active Purchases
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Purchases
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPurchaseList'
          description: ''
    post:
      operationId: api_v1_purchases_create
      description: Create a new Purchase record with the provided data.
      summary: Create a new Purchase
      tags:
      - Purchases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Purchase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Purchase'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
          description: ''
  /api/v1/purchases/{id}/:
    get:
      operationId: api_v1_purchases_retrieve
      description: Retrieve the details of a specific active Purchase by ID.
      summary: Retrieve a Purchase
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this purchase.
        required: true
      tags:
      - Purchases
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
          description: ''
    put:
      operationId: api_v1_purchases_update
      description: Fully update a Purchase record by ID.
      summary: Update a Purchase
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this purchase.
        required: true
      tags:
      - Purchases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Purchase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Purchase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Purchase'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
          description: ''
    patch:
      operationId: api_v1_purchases_partial_update
      description: Update one or more fields of a Purchase record.
      summary: Partially update a Purchase
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this purchase.
        required: true
      tags:
      - Purchases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedPurchase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedPurchase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedPurchase'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Purchase'
          description: ''
    delete:
      operationId: api_v1_purchases_destroy
      description: Delete (deactivate) a specific Purchase by ID.
      summary: Delete a Purchase
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this purchase.
        required: true
      tags:
      - Purchases
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/schema/:
    get:
      operationId: api_v1_schema_retrieve
      description: |-
        OpenApi3 schema for this API. Format can be selected via content negotiation.

        - YAML: application/vnd.oai.openapi
        - JSON: application/vnd.oai.openapi+json
      parameters:
      - in: query
        name: format
        schema:
          type: string
          enum:
          - json
          - yaml
      - in: query
        name: lang
        schema:
          type: string
          enum:
          - af
          - ar
          - ar-dz
          - ast
          - az
          - be
          - bg
          - bn
          - br
          - bs
          - ca
          - ckb
          - cs
          - cy
          - da
          - de
          - dsb
          - el
          - en
          - en-au
          - en-gb
          - eo
          - es
          - es-ar
          - es-co
          - es-mx
          - es-ni
          - es-ve
          - et
          - eu
          - fa
          - fi
          - fr
          - fy
          - ga
          - gd
          - gl
          - he
          - hi
          - hr
          - hsb
          - hu
          - hy
          - ia
          - id
          - ig
          - io
          - is
          - it
          - ja
          - ka
          - kab
          - kk
          - km
          - kn
          - ko
          - ky
          - lb
          - lt
          - lv
          - mk
          - ml
          - mn
          - mr
          - ms
          - my
          - nb
          - ne
          - nl
          - nn
          - os
          - pa
          - pl
          - pt
          - pt-br
          - ro
          - ru
          - sk
          - sl
          - sq
          - sr
          - sr-latn
          - sv
          - sw
          - ta
          - te
          - tg
          - th
          - tk
          - tr
          - tt
          - udm
          - ug
          - uk
          - ur
          - uz
          - vi
          - zh-hans
          - zh-hant
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/vnd.oai.openapi:
              schema:
                type: object
                additionalProperties: {}
            application/yaml:
              schema:
                type: object
                additionalProperties: {}
            application/vnd.oai.openapi+json:
              schema:
                type: object
                additionalProperties: {}
            application/json:
              schema:
                type: object
                additionalProperties: {}
          description: ''
  /api/v1/stock/adjustments/:
    get:
      operationId: api_v1_stock_adjustments_list
      description: Retrieve a list of all active stock adjustment records.
      summary: List all active stock adjustments
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Inventory
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStockAdjustmentList'
          description: ''
    post:
      operationId: api_v1_stock_adjustments_create
      description: Create a new stock adjustment record with the provided data.
      summary: Create a new stock adjustment
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockAdjustment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StockAdjustment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StockAdjustment'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockAdjustment'
          description: ''
  /api/v1/stock/adjustments/{id}/:
    get:
      operationId: api_v1_stock_adjustments_retrieve
      description: Retrieve the details of a specific active stock adjustment by ID.
      summary: Retrieve a stock adjustment
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this stock adjustment.
        required: true
      tags:
      - Inventory
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockAdjustment'
          description: ''
    put:
      operationId: api_v1_stock_adjustments_update
      description: Fully update a stock adjustment record by ID.
      summary: Update a stock adjustment
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this stock adjustment.
        required: true
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockAdjustment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StockAdjustment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StockAdjustment'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockAdjustment'
          description: ''
    patch:
      operationId: api_v1_stock_adjustments_partial_update
      description: Update one or more fields of a stock adjustment record.
      summary: Partially update a stock adjustment
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this stock adjustment.
        required: true
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStockAdjustment'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedStockAdjustment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStockAdjustment'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockAdjustment'
          description: ''
    delete:
      operationId: api_v1_stock_adjustments_destroy
      description: Delete (deactivate) a specific stock adjustment by ID.
      summary: Delete a stock adjustment
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this stock adjustment.
        required: true
      tags:
      - Inventory
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/stock/locations/:
    get:
      operationId: api_v1_stock_locations_list
      description: Retrieve a list of all active location records.
      summary: List all active locations
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Inventory
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedLocationList'
          description: ''
    post:
      operationId: api_v1_stock_locations_create
      description: Create a new location record with the provided data.
      summary: Create a new location
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Location'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
  /api/v1/stock/locations/{id}/:
    get:
      operationId: api_v1_stock_locations_retrieve
      description: Retrieve the details of a specific active location by ID.
      summary: Retrieve a location
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this location.
        required: true
      tags:
      - Inventory
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
    put:
      operationId: api_v1_stock_locations_update
      description: Fully update a location record by ID.
      summary: Update a location
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this location.
        required: true
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Location'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
    patch:
      operationId: api_v1_stock_locations_partial_update
      description: Update one or more fields of a location record.
      summary: Partially update a location
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this location.
        required: true
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLocation'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
    delete:
      operationId: api_v1_stock_locations_destroy
      description: Delete (deactivate) a specific location by ID.
      summary: Delete a location
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this location.
        required: true
      tags:
      - Inventory
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/stock/pickings/:
    get:
      operationId: api_v1_stock_pickings_list
      description: Retrieve a list of all active stock picking records.
      summary: List all active stock pickings
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - Inventory
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStockPickingList'
          description: ''
    post:
      operationId: api_v1_stock_pickings_create
      description: Create a new stock picking record with the provided data.
      summary: Create a new stock picking
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockPicking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StockPicking'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StockPicking'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockPicking'
          description: ''
  /api/v1/stock/pickings/{id}/:
    get:
      operationId: api_v1_stock_pickings_retrieve
      description: Retrieve the details of a specific active stock picking by ID.
      summary: Retrieve a stock picking
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this stock picking.
        required: true
      tags:
      - Inventory
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockPicking'
          description: ''
    put:
      operationId: api_v1_stock_pickings_update
      description: Fully update a stock picking record by ID.
      summary: Update a stock picking
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this stock picking.
        required: true
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StockPicking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StockPicking'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StockPicking'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockPicking'
          description: ''
    patch:
      operationId: api_v1_stock_pickings_partial_update
      description: Update one or more fields of a stock picking record.
      summary: Partially update a stock picking
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this stock picking.
        required: true
      tags:
      - Inventory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStockPicking'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedStockPicking'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStockPicking'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StockPicking'
          description: ''
    delete:
      operationId: api_v1_stock_pickings_destroy
      description: Delete (deactivate) a specific stock picking by ID.
      summary: Delete a stock picking
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this stock picking.
        required: true
      tags:
      - Inventory
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/:
    get:
      operationId: api_v1_users_list
      parameters:
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCustomUserList'
          description: ''
    post:
      operationId: api_v1_users_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreate'
          description: ''
  /api/v1/users/{id}/:
    get:
      operationId: api_v1_users_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    put:
      operationId: api_v1_users_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUser'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    patch:
      operationId: api_v1_users_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    delete:
      operationId: api_v1_users_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this user.
        required: true
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/activation/:
    post:
      operationId: api_v1_users_activation_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Activation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Activation'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activation'
          description: ''
  /api/v1/users/me/:
    get:
      operationId: api_v1_users_me_retrieve
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    put:
      operationId: api_v1_users_me_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUser'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    patch:
      operationId: api_v1_users_me_partial_update
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    delete:
      operationId: api_v1_users_me_destroy
      tags:
      - api
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/v1/users/resend_activation/:
    post:
      operationId: api_v1_users_resend_activation_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/users/reset_password/:
    post:
      operationId: api_v1_users_reset_password_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/users/reset_password_confirm/:
    post:
      operationId: api_v1_users_reset_password_confirm_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
          description: ''
  /api/v1/users/reset_username/:
    post:
      operationId: api_v1_users_reset_username_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SendEmailReset'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendEmailReset'
          description: ''
  /api/v1/users/reset_username_confirm/:
    post:
      operationId: api_v1_users_reset_username_confirm_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UsernameResetConfirm'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameResetConfirm'
          description: ''
  /api/v1/users/set_password/:
    post:
      operationId: api_v1_users_set_password_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPassword'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetPassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetPassword'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetPassword'
          description: ''
  /api/v1/users/set_username/:
    post:
      operationId: api_v1_users_set_username_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUsername'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SetUsername'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SetUsername'
        required: true
      security:
      - basicAuth: []
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SetUsername'
          description: ''
components:
  schemas:
    Activation:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
      required:
      - token
      - uid
    BillingCurrency:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 15
        symbol:
          type: string
          maxLength: 5
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        description:
          type: string
          nullable: true
      required:
      - created_at
      - id
      - symbol
      - title
      - updated_at
    BillingPlan:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 50
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        currency:
          allOf:
          - $ref: '#/components/schemas/BillingCurrency'
          readOnly: true
        seats_included:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        price_yearly:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        price_monthly:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
      required:
      - created_at
      - currency
      - id
      - title
      - updated_at
    BillingRoleEnum:
      enum:
      - owner
      - billing_admin
      - viewer
      type: string
      description: |-
        * `owner` - Owner
        * `billing_admin` - Billing Admin
        * `viewer` - Viewer
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 100
        parent:
          type: string
          format: uuid
          nullable: true
      required:
      - created_at
      - id
      - title
      - updated_at
    Company:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        address:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
          maxLength: 20
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        allowed_users:
          type: array
          items:
            type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - created_at
      - id
      - title
      - updated_at
    Currency:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        is_active:
          type: boolean
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        title:
          type: string
          maxLength: 100
        symbol:
          type: string
          maxLength: 10
        code:
          type: string
          maxLength: 10
        is_default:
          type: boolean
        company:
          type: integer
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
        deleted_by:
          type: integer
          nullable: true
      required:
      - code
      - created_at
      - id
      - symbol
      - title
      - updated_at
    CustomUser:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        billing_role:
          $ref: '#/components/schemas/BillingRoleEnum'
        tenant:
          type: integer
          nullable: true
        groups:
          type: string
          readOnly: true
        permissions:
          type: string
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        companies:
          type: array
          items:
            $ref: '#/components/schemas/Company'
          readOnly: true
        selected_company:
          type: integer
          nullable: true
      required:
      - companies
      - groups
      - id
      - permissions
      - username
    Invoice:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        customer_name:
          type: string
          nullable: true
          maxLength: 150
        amount_total:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
        amount_paid:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/Status4e7Enum'
          readOnly: true
        payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount_paid
      - created_at
      - id
      - payments
      - status
      - title
      - updated_at
    Location:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        code:
          type: string
          maxLength: 64
        main:
          type: boolean
        active:
          type: boolean
      required:
      - code
      - created_at
      - id
      - title
      - updated_at
    PaginatedBillingPlanList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/BillingPlan'
    PaginatedCategoryList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    PaginatedCompanyList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Company'
    PaginatedCurrencyList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Currency'
    PaginatedCustomUserList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/CustomUser'
    PaginatedInvoiceList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Invoice'
    PaginatedLocationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Location'
    PaginatedPartnerList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Partner'
    PaginatedPaymentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
    PaginatedPaymentMethodList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
    PaginatedProductList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Product'
    PaginatedPurchaseList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Purchase'
    PaginatedRegisterList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Register'
    PaginatedSaleList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Sale'
    PaginatedSessionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Session'
    PaginatedStockAdjustmentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/StockAdjustment'
    PaginatedStockPickingList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/StockPicking'
    PaginatedUnitList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Unit'
    Partner:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        phone:
          type: string
          maxLength: 20
        address_1:
          type: string
          maxLength: 250
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        address_2:
          type: string
          maxLength: 250
        is_blacklisted:
          type: boolean
        is_customer:
          type: boolean
        is_supplier:
          type: boolean
        image:
          type: string
          format: uri
          nullable: true
        notes:
          type: string
          nullable: true
      required:
      - address_1
      - address_2
      - created_at
      - id
      - name
      - updated_at
    PasswordResetConfirm:
      type: object
      properties:
        uid:
          type: string
        token:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - token
      - uid
    PatchedCategory:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 100
        parent:
          type: string
          format: uuid
          nullable: true
    PatchedCompany:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          maxLength: 255
        address:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
          maxLength: 20
        email:
          type: string
          format: email
          nullable: true
          maxLength: 254
        website:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        allowed_users:
          type: array
          items:
            type: integer
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedCurrency:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        is_active:
          type: boolean
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        title:
          type: string
          maxLength: 100
        symbol:
          type: string
          maxLength: 10
        code:
          type: string
          maxLength: 10
        is_default:
          type: boolean
        company:
          type: integer
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
        deleted_by:
          type: integer
          nullable: true
    PatchedCustomUser:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        id:
          type: integer
          readOnly: true
        username:
          type: string
          readOnly: true
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        billing_role:
          $ref: '#/components/schemas/BillingRoleEnum'
        tenant:
          type: integer
          nullable: true
        groups:
          type: string
          readOnly: true
        permissions:
          type: string
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        companies:
          type: array
          items:
            $ref: '#/components/schemas/Company'
          readOnly: true
        selected_company:
          type: integer
          nullable: true
    PatchedInvoice:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        customer_name:
          type: string
          nullable: true
          maxLength: 150
        amount_total:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
        amount_paid:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        status:
          allOf:
          - $ref: '#/components/schemas/Status4e7Enum'
          readOnly: true
        payments:
          type: array
          items:
            $ref: '#/components/schemas/Payment'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedLocation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        code:
          type: string
          maxLength: 64
        main:
          type: boolean
        active:
          type: boolean
    PatchedPartner:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        phone:
          type: string
          maxLength: 20
        address_1:
          type: string
          maxLength: 250
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        address_2:
          type: string
          maxLength: 250
        is_blacklisted:
          type: boolean
        is_customer:
          type: boolean
        is_supplier:
          type: boolean
        image:
          type: string
          format: uri
          nullable: true
        notes:
          type: string
          nullable: true
    PatchedPayment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        is_active:
          type: boolean
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        type:
          $ref: '#/components/schemas/TypeEnum'
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
        validated:
          type: boolean
        company:
          type: integer
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
        deleted_by:
          type: integer
          nullable: true
        customer:
          type: string
          format: uuid
          nullable: true
        method:
          type: string
          format: uuid
          nullable: true
        purchase:
          type: string
          format: uuid
        sale:
          type: string
          format: uuid
    PatchedPaymentMethod:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        is_active:
          type: boolean
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          maxLength: 100
        is_online:
          type: boolean
        company:
          type: integer
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
        deleted_by:
          type: integer
          nullable: true
    PatchedProduct:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        stock_quants:
          type: array
          items:
            $ref: '#/components/schemas/StockQuant'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 250
        image:
          type: string
          format: uri
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        cost:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        barcode:
          type: string
          nullable: true
          maxLength: 128
        reference:
          type: string
          nullable: true
          maxLength: 250
        sku:
          type: string
          nullable: true
          maxLength: 50
        status:
          type: boolean
        alert_quantity:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        category:
          type: string
          format: uuid
          nullable: true
        unit:
          type: string
          format: uuid
          nullable: true
    PatchedPurchase:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        supplier:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
          readOnly: true
        amount_paid:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseItem'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        updated_by:
          type: integer
          readOnly: true
          nullable: true
        scheduled_date:
          type: string
          format: date-time
          nullable: true
    PatchedRegister:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 50
        location:
          type: string
          format: uuid
          nullable: true
          description: Default location where this register sells from
        location_title:
          type: string
          readOnly: true
        allow_location_selection:
          type: boolean
          description: Allow cashier to select different location per sale
        available_locations:
          type: string
          readOnly: true
        active:
          type: boolean
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        updated_by:
          type: integer
          readOnly: true
          nullable: true
        company:
          type: integer
          nullable: true
    PatchedSale:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/SaleItem'
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        updated_by:
          type: integer
          readOnly: true
          nullable: true
        amount_total:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        amount_due:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        amount_paid:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        session:
          type: string
          format: uuid
          nullable: true
          description: Session this sale belongs to (optional)
        register:
          type: string
          format: uuid
          nullable: true
        register_title:
          type: string
          readOnly: true
        customer:
          type: string
          format: uuid
          nullable: true
        company:
          type: integer
          nullable: true
        source_location:
          type: string
          format: uuid
          nullable: true
          description: Location from which products are sold
        source_location_title:
          type: string
          readOnly: true
        picking:
          type: string
          format: uuid
          readOnly: true
          nullable: true
          description: Stock picking created for this sale
    PatchedSession:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        start_at:
          type: string
          format: date-time
        end_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        status:
          allOf:
          - $ref: '#/components/schemas/SessionStatusEnum'
          readOnly: true
        opening_balance:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        closing_balance:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        total_sales:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        total_refunds:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        updated_by:
          type: integer
          readOnly: true
          nullable: true
        register:
          type: string
          format: uuid
        register_title:
          type: string
          readOnly: true
        notes:
          type: string
          nullable: true
    PatchedStockAdjustment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        lines:
          type: array
          items:
            $ref: '#/components/schemas/StockAdjustmentLine'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        reference:
          type: string
          maxLength: 100
        status:
          $ref: '#/components/schemas/StockAdjustmentStatusEnum'
        reason:
          type: string
          nullable: true
        scheduled_date:
          type: string
          format: date-time
        location:
          type: string
          format: uuid
    PatchedStockPicking:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        moves:
          type: array
          items:
            $ref: '#/components/schemas/StockMove'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          nullable: true
          maxLength: 255
        reference:
          type: string
          nullable: true
          maxLength: 100
        picking_type:
          $ref: '#/components/schemas/PickingTypeEnum'
        status:
          $ref: '#/components/schemas/StockPickingStatusEnum'
        scheduled_date:
          type: string
          format: date-time
          nullable: true
        source_location:
          type: string
          format: uuid
          nullable: true
        destination_location:
          type: string
          format: uuid
          nullable: true
        partner:
          type: string
          format: uuid
          nullable: true
    PatchedUnit:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 25
        abbreviation:
          type: string
          nullable: true
          maxLength: 10
    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        invoice:
          type: string
          format: uuid
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
        method:
          type: string
          nullable: true
          maxLength: 50
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - amount
      - created_at
      - id
      - invoice
      - updated_at
    PaymentMethod:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        is_active:
          type: boolean
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        deleted_at:
          type: string
          format: date-time
          nullable: true
        name:
          type: string
          maxLength: 100
        is_online:
          type: boolean
        company:
          type: integer
          nullable: true
        created_by:
          type: integer
          nullable: true
        updated_by:
          type: integer
          nullable: true
        deleted_by:
          type: integer
          nullable: true
      required:
      - created_at
      - id
      - name
      - updated_at
    PickingTypeEnum:
      enum:
      - incoming
      - outgoing
      - internal
      type: string
      description: |-
        * `incoming` - Incoming
        * `outgoing` - Outgoing
        * `internal` - Internal Transfer
    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        stock_quants:
          type: array
          items:
            $ref: '#/components/schemas/StockQuant'
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 250
        image:
          type: string
          format: uri
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        cost:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        barcode:
          type: string
          nullable: true
          maxLength: 128
        reference:
          type: string
          nullable: true
          maxLength: 250
        sku:
          type: string
          nullable: true
          maxLength: 50
        status:
          type: boolean
        alert_quantity:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        category:
          type: string
          format: uuid
          nullable: true
        unit:
          type: string
          format: uuid
          nullable: true
      required:
      - created_at
      - id
      - image
      - stock_quants
      - title
      - updated_at
    Purchase:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        supplier:
          type: string
          format: uuid
        date:
          type: string
          format: date-time
          readOnly: true
        amount_paid:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/PurchaseItem'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        updated_by:
          type: integer
          readOnly: true
          nullable: true
        scheduled_date:
          type: string
          format: date-time
          nullable: true
      required:
      - amount_paid
      - created_at
      - created_by
      - date
      - id
      - items
      - supplier
      - updated_at
      - updated_by
    PurchaseItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        updated_by:
          type: integer
          readOnly: true
          nullable: true
        product:
          type: string
          format: uuid
        quantity:
          type: integer
          maximum: 9223372036854775807
          minimum: 0
          format: int64
        cost_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        purchase:
          type: string
          format: uuid
          readOnly: true
      required:
      - cost_price
      - created_at
      - created_by
      - id
      - product
      - purchase
      - quantity
      - updated_at
      - updated_by
    Register:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 50
        location:
          type: string
          format: uuid
          nullable: true
          description: Default location where this register sells from
        location_title:
          type: string
          readOnly: true
        allow_location_selection:
          type: boolean
          description: Allow cashier to select different location per sale
        available_locations:
          type: string
          readOnly: true
        active:
          type: boolean
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        updated_by:
          type: integer
          readOnly: true
          nullable: true
        company:
          type: integer
          nullable: true
      required:
      - available_locations
      - created_at
      - created_by
      - id
      - location_title
      - title
      - updated_at
      - updated_by
    Sale:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        items:
          type: array
          items:
            $ref: '#/components/schemas/SaleItem'
        notes:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        updated_by:
          type: integer
          readOnly: true
          nullable: true
        amount_total:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        amount_due:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        amount_paid:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        session:
          type: string
          format: uuid
          nullable: true
          description: Session this sale belongs to (optional)
        register:
          type: string
          format: uuid
          nullable: true
        register_title:
          type: string
          readOnly: true
        customer:
          type: string
          format: uuid
          nullable: true
        company:
          type: integer
          nullable: true
        source_location:
          type: string
          format: uuid
          nullable: true
          description: Location from which products are sold
        source_location_title:
          type: string
          readOnly: true
        picking:
          type: string
          format: uuid
          readOnly: true
          nullable: true
          description: Stock picking created for this sale
      required:
      - amount_due
      - amount_paid
      - amount_total
      - created_at
      - created_by
      - id
      - items
      - picking
      - register_title
      - source_location_title
      - updated_at
      - updated_by
    SaleItem:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        product:
          type: string
          format: uuid
        product_title:
          type: string
          readOnly: true
        quantity:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          description: Quantity sold (supports decimals for weight-based items)
        cost_price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        source_location:
          type: string
          format: uuid
          nullable: true
          description: Override location for this item (defaults to sale location)
        subtotal:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        sale:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        updated_by:
          type: integer
          readOnly: true
          nullable: true
      required:
      - cost_price
      - created_at
      - created_by
      - id
      - product
      - product_title
      - quantity
      - sale
      - subtotal
      - updated_at
      - updated_by
    SendEmailReset:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Session:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          maxLength: 100
        start_at:
          type: string
          format: date-time
        end_at:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        status:
          allOf:
          - $ref: '#/components/schemas/SessionStatusEnum'
          readOnly: true
        opening_balance:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        closing_balance:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
          nullable: true
        total_sales:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        total_refunds:
          type: string
          format: decimal
          pattern: ^-?\d{0,10}(?:\.\d{0,2})?$
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        created_by:
          type: integer
          readOnly: true
          nullable: true
        updated_by:
          type: integer
          readOnly: true
          nullable: true
        register:
          type: string
          format: uuid
        register_title:
          type: string
          readOnly: true
        notes:
          type: string
          nullable: true
      required:
      - created_at
      - created_by
      - end_at
      - id
      - register
      - register_title
      - status
      - total_refunds
      - total_sales
      - updated_at
      - updated_by
    SessionStatusEnum:
      enum:
      - opened
      - closed
      - in_progress
      type: string
      description: |-
        * `opened` - Opened
        * `closed` - Closed
        * `in_progress` - In Progress
    SetPassword:
      type: object
      properties:
        new_password:
          type: string
        current_password:
          type: string
      required:
      - current_password
      - new_password
    SetUsername:
      type: object
      properties:
        current_password:
          type: string
        new_username:
          type: string
          title: Username
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - current_password
      - new_username
    Status4e7Enum:
      enum:
      - active
      - trialing
      - canceled
      - past_due
      - expired
      type: string
      description: |-
        * `active` - Active
        * `trialing` - Trialing
        * `canceled` - Canceled
        * `past_due` - Past Due
        * `expired` - Expired
    StockAdjustment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        lines:
          type: array
          items:
            $ref: '#/components/schemas/StockAdjustmentLine'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        reference:
          type: string
          maxLength: 100
        status:
          $ref: '#/components/schemas/StockAdjustmentStatusEnum'
        reason:
          type: string
          nullable: true
        scheduled_date:
          type: string
          format: date-time
        location:
          type: string
          format: uuid
      required:
      - created_at
      - id
      - lines
      - location
      - reference
      - scheduled_date
      - updated_at
    StockAdjustmentLine:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        counted_quantity:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        adjustment:
          type: string
          format: uuid
        product:
          type: string
          format: uuid
      required:
      - adjustment
      - counted_quantity
      - created_at
      - id
      - product
      - updated_at
    StockAdjustmentStatusEnum:
      enum:
      - draft
      - confirmed
      - done
      type: string
      description: |-
        * `draft` - Draft
        * `confirmed` - Confirmed
        * `done` - Done
    StockMove:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        reserved_quantity:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        is_processed:
          type: boolean
          description: Whether stock movement has been processed
        picking:
          type: string
          format: uuid
          readOnly: true
        product:
          type: string
          format: uuid
        source_location:
          type: string
          format: uuid
          nullable: true
        destination_location:
          type: string
          format: uuid
          nullable: true
      required:
      - created_at
      - id
      - picking
      - product
      - updated_at
    StockPicking:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        moves:
          type: array
          items:
            $ref: '#/components/schemas/StockMove'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          nullable: true
          maxLength: 255
        reference:
          type: string
          nullable: true
          maxLength: 100
        picking_type:
          $ref: '#/components/schemas/PickingTypeEnum'
        status:
          $ref: '#/components/schemas/StockPickingStatusEnum'
        scheduled_date:
          type: string
          format: date-time
          nullable: true
        source_location:
          type: string
          format: uuid
          nullable: true
        destination_location:
          type: string
          format: uuid
          nullable: true
        partner:
          type: string
          format: uuid
          nullable: true
      required:
      - created_at
      - id
      - moves
      - picking_type
      - updated_at
    StockPickingStatusEnum:
      enum:
      - new
      - done
      - cancel
      type: string
      description: |-
        * `new` - New
        * `done` - Done
        * `cancel` - Cancelled
    StockQuant:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        product:
          type: string
          format: uuid
        location:
          type: string
          format: uuid
        quantity:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
      required:
      - id
      - location
      - product
    Subscription:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        plan:
          type: string
          format: uuid
        start_date:
          type: string
          format: date-time
          readOnly: true
        end_date:
          type: string
          format: date-time
          nullable: true
        status:
          allOf:
          - $ref: '#/components/schemas/Status4e7Enum'
          readOnly: true
        seats:
          type: integer
          readOnly: true
        auto_renew:
          type: boolean
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - auto_renew
      - created_at
      - id
      - plan
      - seats
      - start_date
      - status
      - updated_at
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    TypeEnum:
      enum:
      - purchase
      - sale
      type: string
      description: |-
        * `purchase` - Purchase
        * `sale` - Sale
    Unit:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 25
        abbreviation:
          type: string
          nullable: true
          maxLength: 10
      required:
      - created_at
      - id
      - title
      - updated_at
    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        id:
          type: integer
          readOnly: true
        password:
          type: string
          writeOnly: true
      required:
      - id
      - password
      - username
    UsernameResetConfirm:
      type: object
      properties:
        new_username:
          type: string
          title: Username
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
      required:
      - new_username
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
